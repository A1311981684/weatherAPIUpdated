swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /API
paths:
  /{city}:
    get:
      tags:
      - weatherAPI/controllersWeatherInfoController
      description: Get All The Data Can Be Retrieved From The URL
      operationId: WeatherInfoController.GetAll
      parameters:
      - in: path
        name: city
        description: The City Needed To Be Checked.
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.PrimaryData'
        "403":
          description: :city invalid
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
  /weather_img/:
    get:
      tags:
      - weather_img
      description: Randomly get an image
      operationId: WeatherImgController.Test for Getting a IMG
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.WeatherImage'
        "403":
          description: :object is empty
  /weather_img/{id}/{size}:
    get:
      tags:
      - weather_img
      description: get IMG by id
      operationId: WeatherImgController.Get One specific IMG
      parameters:
      - in: path
        name: id
        description: The key for a IMG
        required: true
        type: string
      - in: path
        name: size
        description: The key for Image Size
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.WeatherImage'
        "403":
          description: :id or size invalid
  /weather_info/forecast/{city}:
    get:
      tags:
      - weatherAPI/controllersWeatherInfoController
      description: Get all forecast info except for TODAY
      operationId: WeatherInfoController.GetAllForecast
      parameters:
      - in: path
        name: city
        description: Get Specific city's forecast
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.SomeDay'
        "403":
          description: :city invalid
  /weather_info/today/{city}:
    get:
      tags:
      - weatherAPI/controllersWeatherInfoController
      description: Get Today's Weather information
      operationId: WeatherInfoController.GetToday
      parameters:
      - in: path
        name: city
        description: Get specific city's current day weather
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Today'
        "403":
          description: :city invalid
definitions:
  models.PrimaryData:
    title: PrimaryData
    type: object
    properties:
      city:
        type: string
      count:
        type: integer
        format: int64
      data:
        $ref: '#/definitions/models.SecondaryData'
      date:
        type: string
      message:
        type: string
      status:
        type: integer
        format: int64
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.SecondaryData:
    title: SecondaryData
    type: object
    properties:
      forecast:
        type: array
        items:
          $ref: '#/definitions/models.SomeDay'
      ganmao:
        type: string
      pm10:
        type: number
        format: double
      pm25:
        type: number
        format: double
      quality:
        type: string
      shidu:
        type: string
      wendu:
        type: string
      yesterday:
        $ref: '#/definitions/models.Yesterday'
  models.SomeDay:
    title: SomeDay
    type: object
    properties:
      aqi:
        type: number
        format: double
      date:
        type: string
      fl:
        type: string
      fx:
        type: string
      high:
        type: string
      low:
        type: string
      notice:
        type: string
      sunrise:
        type: string
      sunset:
        type: string
      type:
        type: string
  models.Today:
    title: Today
    type: object
    properties:
      ganmao:
        type: string
      pm_10:
        type: number
        format: double
      pm_25:
        type: number
        format: double
      quality:
        type: string
      shidu:
        type: string
      someday:
        $ref: '#/definitions/models.SomeDay'
      wendu:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
  models.WeatherImage:
    title: WeatherImage
    type: object
    properties:
      Images:
        type: array
        items:
          type: string
          format: byte
  models.Yesterday:
    title: SomeDay
    type: object
    properties:
      aqi:
        type: number
        format: double
      date:
        type: string
      fl:
        type: string
      fx:
        type: string
      high:
        type: string
      low:
        type: string
      notice:
        type: string
      sunrise:
        type: string
      sunset:
        type: string
      type:
        type: string
tags:
- name: weatherAPI/controllersWeatherInfoController
  description: |
    Operation about Weather Information
- name: weather_img
  description: |
    Operations about weather
- name: user
  description: |
    Operations about Users (For testing)
